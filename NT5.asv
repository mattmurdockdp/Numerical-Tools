%% Neural Networks
clear all
close all

%% Data definition

Npoints_sector = 100;
N_sectors = 3;

x1_sector1 = rand(Npoints_sector,1)*10+25;
x2_sector1 = rand(Npoints_sector,1)*10+20;

x1_sector2 = rand(Npoints_sector,1)*10+15;
x2_sector2 = rand(Npoints_sector,1)*10+10;

x1_sector3 = rand(Npoints_sector,1)*10+10;
x2_sector3 = rand(Npoints_sector,1)*10+30;

y_sector1 = ones(Npoints_sector,1);
y_sector2 = ones(Npoints_sector,1)*2;
y_sector3 = ones(Npoints_sector,1)*3;

x1 = [x1_sector1; x1_sector2; x1_sector3];
x2 = [x2_sector1; x2_sector2; x2_sector3];
y  = [y_sector1; y_sector2; y_sector3];

D = [x1, x2, y];

% Colors for each sector
colors = lines(3); 

% Points
figure;
hold on;
scatter(x1(y==1), x2(y==1), 50, colors(1,:), 'filled'); % Sector 1
scatter(x1(y==2), x2(y==2), 50, colors(2,:), 'filled'); % Sector 2
scatter(x1(y==3), x2(y==3), 50, colors(3,:), 'filled'); % Sector 3
hold off;
xlabel('x1');
ylabel('x2');
title('Distribución de puntos en los 3 sectores');
legend({'Sector 1', 'Sector 2', 'Sector 3'}, 'Location', 'best');
grid on;

%% Divide the data into train data (70% of D) and test data (30% of D)

Npoints_total = size(D, 1);

idx = randperm(Npoints_total); 

train_size = round(0.7 * Npoints_total); 

train_idx = idx(1:train_size);    
test_idx = idx(train_size+1:end); 

D_train = D(train_idx, :);
D_test = D(test_idx, :);

x1_train = D_train(:,1);
x2_train = D_train(:,2);
y_train = D_train(:,3);

x1_test = D_test(:,1);
x2_test = D_test(:,2);
y_test = D_test(:,3);


%% Solve logistic regression considering linear model x = [1, x1, x2]

N_train = size(x1_train,1);
N_dim = 

% Define matrix X
X_linear = [ones(N_train,1), x1_train, x2_train];

% Define matrix Y of 1's and 0's
Y = zeros(N_train,N_sectors);
for i=1:N_train
    Y(i,y_train(i))=1;
end

% Theta linear model x = [1,x1,x2]
Theta_linear = randn(3,N_sectors) * 0.1; 

% Heavyside function with noise
noise = 30 * randn(N_train,1);
h_linear = X_linear*Theta_linear+noise;

% Signoid function
g_linear = zeros(N_train,N_sectors);
for i=1:N_train
    for j=1:N_sectors
        g_linear(i,j) = 1/(1+exp(-h_linear(i,j)));
    end
end

% Gradient method
tau = 0.0001;
iter = 200;
Lambda = 0;
Cost = zeros(iter,1);
Grad_save1 = zeros(iter,1);
Grad_save2 = zeros(iter,1);
Grad_save3 = zeros(iter,1);

for k=1:iter
    sum_grad1 = zeros(3,1);
    sum_grad2 = zeros(3,1);
    sum_grad3 = zeros(3,1);
    for i=1:Npoints_sector
        sum_grad1 = sum_grad1 + (g_linear(i,1)-Y(i,1))*X(i,:)';
        sum_grad2 = sum_grad2 + (g_linear(i,2)-Y(i,2))*X(i,:)';
        sum_grad3 = sum_grad3 + (g_linear(i,3)-Y(i,3))*X(i,:)';
    end

    % Gradient
    Gradient1 = (1/Npoints_sector)*sum_grad1;
    Gradient2 = (1/Npoints_sector)*sum_grad2;
    Gradient3 = (1/Npoints_sector)*sum_grad3;

    Grad_save1(k) = norm(Gradient1);
    Grad_save2(k) = norm(Gradient2);
    Grad_save3(k) = norm(Gradient3);

    % Update values
    Theta_linear(1,:) = Theta_linear(1,:) + tau * Gradient1';
    Theta_linear(2,:) = Theta_linear(2,:) + tau * Gradient2';
    Theta_linear(3,:) = Theta_linear(3,:) + tau * Gradient3';
    h_linear = X*Theta_linear;
    for i=1:Npoints_sector
        for j=1:N_sectors
            g_linear(i,j) = 1/(1+exp(-h_linear(i,j)));
        end
    end

    % Cost function
    sum_cost = 0;
    for i=1:Npoints_sector
        for j=1:3
            sum_cost = sum_cost + (1-Y(i,j))*(-log(1-g_linear(i,j)))+Y(i,j)*(-log(g_linear(i,j)))+Lambda*Theta_linear(:,j)'*Theta_linear(:,j);
        end
    end
    Cost(k,1)=(1/Npoints_sector)*sum_cost;

end

figure;
plot(1:iter,Grad_save1,'r')
hold on
plot(1:iter,Grad_save2,'g')
plot(1:iter,Grad_save3,'b')
legend('Gradient Sector 1', 'Gradient Sector 2', 'Gradient Sector 3', 'Location', 'Best')
title('Gradient per cada iteració')
xlabel('Iteració');
ylabel('Gradient');

figure;
plot(1:iter,Cost)
title('Cost')

% Decision lines
DL1 = (-Theta_linear(1,1)-Theta_linear(1,2)*X(:,2))/Theta_linear(1,3);
DL2 = (-Theta_linear(2,1)-Theta_linear(2,2)*X(:,2))/Theta_linear(2,3);
DL3 = (-Theta_linear(3,1)-Theta_linear(3,2)*X(:,2))/Theta_linear(3,3);



